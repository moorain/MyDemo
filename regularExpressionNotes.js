const ts = (reg, str) => {
    console.log(str, reg.test(str));
    return reg.test(str);
}

let reg1 = /\d/;  //\d 代表0-9之间的数字

//元字符：

//1. 具有特殊意义的：
// \    : 转义字符 ，转译后面字符代表的含义
// ^    : 以某一个元字符开始
// $    : 以某一个元字符结尾
// \n   : 匹配一个换行符
// .    :除了\n以外任意字符

let reg5 = /^0.2$/;// 以0开头 以2结尾,中间任意【一个】字符
ts(reg5, '0d2');//true
ts(reg5, '0。2');//true
ts(reg5, '0@2');//true

//只代表0.2的正则,利用转译字符
let reg6 = /^0\.2$/;
ts(reg6, '0d2');//false
ts(reg6, '0.2');//true

let reg2 = /^\d$/;
ts(reg2, '2')//true 
ts(reg2, '012')//false  ---> ^ $ 代表开头和结尾，不占位


//  ()   :分组 ,把正则本身分成几个小的正则

ts(/^\d+moorain\d+$/, '2moorain123123')//true 
ts(/^(\d+)moorain(\d+)$/, '2moorain123123')//true 

// x|y    : x或者y
// [xyz]  : x或y或z中的一个
// [^xyz]: 除了三个以外的任意一个字符
// [a-z] : 包含a-z之间到任意一个字符
// [^a-z]: 除了a-z之间到任意一个字符
// \d     : 一个0-9之间的数字
// \D     : 除了0-9之间的任意一个字符
// \b     : 匹配一个边界符 'w1 w2 w3'
// \w     :数字字母下划线中任意一个字符  [0-9a-zA-Z_]
// \s     :匹配一个空白字符，空格，一个制表符，换页符


//2.代表出现次数的量词元字符
// *     : 出现0-多次
// +     : 出现1-多次
// ?     : 出现1-多次
// {n}   : 出现n多次
// {n,}  : 出现n到多次
// {n,m} : 出现n到m次

let reg3 = /^\d+$/
ts(reg3, '2015')//true

// 一个简单验证手机号的正则
let reg4 = /^1\d{10}$/


// 3. practice  

// 1.检测有效数字的正则：
// 1.1 以 + - 开头且出现0次或1次： /^[+-]?$/ 
// 1.2 以1-9开头多位数或单数 ： /^(\d|([1-9]\d+))$/
// 1.3 可以有小数点，且小数点后必须有一个或多个数字：/^(\.\d+)?$/
// 1.4 /^[+-]?(\d|([1-9]\d+))(\.\d+)?$/

ts(/^[+-]?(\d|([1-9]\d+))(\.\d+)?$/, '1.12312')//true
